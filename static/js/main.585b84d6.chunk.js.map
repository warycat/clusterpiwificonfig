{"version":3,"sources":["pi.js","consts.js","cluster.js","store.js","WiFiDialog.js","ClusterView.js","App.js","serviceWorker.js","index.js"],"names":["Pi","device","this","gatt","connect","server","connected","getPrimaryService","service","getCharacteristic","tx","startNotifications","addEventListener","e","onTx","target","value","rx","console","log","receivedData","i","byteLength","getUint8","receivedString","String","fromCharCode","apply","script","encoder","TextEncoder","writeValue","encode","error","observable","Cluster","navigator","bluetooth","requestDevice","filters","name","optionalServices","pi","dict","set","id","init","values","send","S","disconnect","Object","keys","length","Map","computed","handleClickOpen","newSsid","curSsid","newPassword","curPassword","open","handleClose","handleConfirm","handleScan","a","cluster","scan","handleSend","window","WiFiDialog","observer","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","TextField","autoFocus","margin","label","type","fullWidth","onChange","DialogActions","Button","onClick","color","PiCard","Grid","item","sm","xs","Card","style","borderColor","variant","CardContent","Typography","component","height","width","overflow","CardActions","size","ClusterView","container","map","x","key","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","App","classes","AppBar","position","Toolbar","IconButton","edge","className","aria-label","ButtonGroup","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.585b84d6.chunk.js","sourcesContent":["import * as K from './consts.js';\nimport { observable } from \"mobx\"\n\n\nclass Pi {\n    @observable connected = false;\n    @observable log = \"\";\n\n    constructor(device) {\n        this.device = device;\n    }\n\n    async init() {\n        try {\n            this.server = await this.device.gatt.connect();\n            this.connected = this.device.gatt.connected;\n            this.service = await this.server.getPrimaryService(K.UART_SERVICE_UUID);\n            this.tx = await this.service.getCharacteristic(K.UART_TX_CHARACTERISTIC_UUID);\n            this.tx.startNotifications();\n            this.tx.addEventListener(\"characteristicvaluechanged\", (e) => this.onTx(e.target.value));\n            this.rx = await this.service.getCharacteristic(K.UART_RX_CHARACTERISTIC_UUID);\n            return this;\n        } catch (error) {\n            console.log(\"error\");\n            console.log(error);\n        }\n    }\n\n    onTx(value) {\n        let receivedData = [];\n        for (var i = 0; i < value.byteLength; i++) {\n            receivedData[i] = value.getUint8(i);\n        }\n\n        const receivedString = String.fromCharCode.apply(null, receivedData);\n        this.log += receivedString;\n        console.log(receivedString);\n    }\n\n    send(script) {\n        try {\n            let encoder = new TextEncoder();\n            this.rx.writeValue(encoder.encode(script));\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nexport default Pi;  ","export const UART_SERVICE_UUID = \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\";\nexport const UART_RX_CHARACTERISTIC_UUID = \"6e400002-b5a3-f393-e0a9-e50e24dcca9e\";\nexport const UART_TX_CHARACTERISTIC_UUID = \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\";\nexport const CLUSTER_PI_DEVICE_NAME = \"rpi-gatt-server\";\n\n","import S from './store.js';\nimport * as K from './consts.js';\nimport Pi from './pi.js';\nimport { observable, computed } from \"mobx\"\n\nclass Cluster {\n    @observable dict = new Map()\n\n    @computed get n() {\n        return Object.keys(this.dict).length;\n    }\n\n    async scan() {\n        try {\n            console.log(\"Requesting Bluetooth Device...\");\n            let device = await navigator.bluetooth.requestDevice({\n                filters: [{ name: K.CLUSTER_PI_DEVICE_NAME }],\n                optionalServices: [K.UART_SERVICE_UUID],\n            });\n            let pi = new Pi(device);\n            this.dict.set(pi.device.id, pi);\n            pi.init();\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    async send() {\n        for (let pi of this.dict.values()) {\n            pi.send(S.script);\n        }\n    }\n\n    async disconnect() {\n        for (let id in this.dict) {\n            let pi = this.dict[id];\n            if (pi.gatt.connected) {\n                pi.gatt.disconnect();\n                console.log(\"Disconnected\");\n            }\n        }\n    }\n}\n\nexport default Cluster;\n","import { observable, computed } from \"mobx\"\nimport Cluster from './cluster.js';\n\nclass Store {\n    @observable open = false;\n    @observable curSsid = \"Office\";\n    @observable curPassword = \"12345678\";\n    @observable newSsid = \"\";\n    @observable newPassword = \"\";\n    @observable cluster = new Cluster();\n\n    @computed get script() {\n        return `\nS=\"${this.curSsid}\"\nP=\"${this.curPassword}\"\nF=\"/etc/wpa_supplicant/wpa_supplicant.conf\"\nTS=$(wpa_passphrase $S $P | sed -n \"/ssid=\\\\\"[^\\\\\"]*\\\\\"/p\")\nFS=$(cat $F | sed -n \"/ssid=\\\\\"[^\\\\\"]*\\\\\"/p\")\nTP=$(wpa_passphrase $S $P | sed \"/#psk=\\\\\"[^\\\\\"]*\\\\\"/d\" | sed -n \"/psk/p\")\nFP=$(cat $F | sed \"/#psk=\\\\\"[^\\\\\"]*\\\\\"/d\" | sed -n \"/psk/p\")\nsed -i \"s/$FS/$TS/\" $F\nsed -i \"s/$FP/$TP/\" $F\ncat $F\nwpa_cli -i wlan0 reconfigure\nhostname -I                \n`;\n    }\n\n    handleClickOpen = () => {\n        this.newSsid = this.curSsid;\n        this.newPassword = this.curPassword;\n        this.open = true;\n    };\n\n    handleClose = (e) => {\n        this.open = false;\n    };\n\n    handleConfirm = (e) => {\n        this.curSsid = this.newSsid;\n        this.curPassword = this.newPassword;\n        this.open = false;\n    };\n\n    handleScan = async (e) => {\n        await this.cluster.scan();\n    }\n\n    handleSend = async (e) => {\n        await this.cluster.send();\n    }\n}\n\nlet S = new Store();\nwindow.S = S;\nexport default S;\n","import S from './store.js';\nimport { observer } from \"mobx-react\"\nimport React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\n\nconst WiFiDialog = observer(() =>\n    <Dialog id=\"dialog\" open={S.open} onClose={S.handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">WiFi</DialogTitle>\n        <DialogContent>\n            <TextField\n                autoFocus\n                margin=\"dense\"\n                id=\"ssid\"\n                label=\"SSID\"\n                type=\"text\"\n                fullWidth\n                value={S.newSsid}\n                onChange={(e) => { S.newSsid = e.target.value }}\n            />\n            <TextField\n                margin=\"dense\"\n                id=\"password\"\n                label=\"PASSWORD\"\n                type=\"password\"\n                fullWidth\n                value={S.newPassword}\n                onChange={(e) => { S.newPassword = e.target.value }}\n            />\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={S.handleClose} color=\"primary\">\n                Cancel\n          </Button>\n            <Button onClick={S.handleConfirm} color=\"primary\">\n                Confirm\n          </Button>\n        </DialogActions>\n    </Dialog>\n)\n\nexport default WiFiDialog;","import S from './store.js';\nimport { observer } from \"mobx-react\"\nimport { values } from \"mobx\"\nimport React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nconst PiCard = observer(({ pi }) =>\n    <Grid item sm={4} xs={12}>\n        <Card style={{ margin: 10, borderColor: pi.connected ? \"green\" : \"red\" }} variant=\"outlined\">\n            <CardContent>\n                <Typography variant=\"h5\" component=\"h2\">\n                    {pi.device.name}\n                </Typography>\n                <Typography style={{ color: pi.connected ? \"green\" : \"red\" }} variant=\"body2\" component=\"h2\">\n                    {pi.connected ? \"connected\" : \"connecting\"}\n                </Typography>\n                <pre style={{ height: \"200px\", width: \"100%\", overflow: \"scroll\" }}>{pi.log}</pre>\n            </CardContent>\n            <CardActions>\n                <Button size=\"small\" onClick={() => pi.send(S.script)}>Send</Button>\n            </CardActions>\n        </Card>\n    </Grid >\n)\n\nconst ClusterView = observer(() =>\n    <Grid container>\n        {values(S.cluster.dict).map((x, id) => <PiCard key={id} pi={x} />)}\n    </Grid>\n)\n\n\nexport default ClusterView;","import S from './store.js';\nimport { observer } from \"mobx-react\";\nimport React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport WiFiDialog from \"./WiFiDialog.js\";\nimport ClusterView from \"./ClusterView.js\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\n\nconst App = observer(() => {\n  const classes = useStyles();\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Cluster Pi WiFi Config\n          </Typography>\n          <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n            <Button variant=\"outlined\" color=\"inherit\" onClick={S.handleSend} >Send All</Button>\n            <Button variant=\"outlined\" color=\"inherit\" onClick={S.handleScan} >BLE Scan</Button>\n            <Button variant=\"outlined\" color=\"inherit\" onClick={S.handleClickOpen}>WiFi Config</Button>\n          </ButtonGroup>\n        </Toolbar>\n      </AppBar>\n      <p><strong>Note:</strong> the permissions API requires that you enable the Experimental Web Platform Features flag in Chrome: <code>chrome://flags/#enable-experimental-web-platform-features</code></p>\n      <WiFiDialog />\n      <ClusterView />\n    </>\n  )\n}\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'mobx-react-lite/batchingForReactDom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}